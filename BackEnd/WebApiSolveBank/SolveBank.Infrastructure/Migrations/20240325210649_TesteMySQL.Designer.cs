// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SolveBank.Infrastructure.Configuration;

#nullable disable

namespace SolveBank.Infrastructure.Migrations
{
    [DbContext(typeof(SolveBankDbConfig))]
    [Migration("20240325210649_TesteMySQL")]
    partial class TesteMySQL
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SolveBank.Entities.Models.Atendimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ContaID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataSolicitacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataUltimaResposta")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StatusAtendimento")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContaID");

                    b.ToTable("Atendimentos");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.Autenticacao2Fatores", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UsuarioID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Utilizado")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Autenticacao2Fatores");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.Cartao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ContaBancariaId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ContaID")
                        .HasColumnType("char(36)");

                    b.Property<int>("EnumBandeiraCartao")
                        .HasColumnType("int");

                    b.Property<int>("EnumCategoriaCartao")
                        .HasColumnType("int");

                    b.Property<int>("EnumTipoCartao")
                        .HasColumnType("int");

                    b.Property<decimal>("Limite")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LimiteUtilizado")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Validade")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ContaBancariaId");

                    b.HasIndex("ContaID");

                    b.ToTable("Cartoes");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.ContaBancaria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Agencia")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EnumCategoriaConta")
                        .HasColumnType("int");

                    b.Property<string>("Informacoes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Limite")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LimiteUtilizado")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Numero")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("int")
                        .IsFixedLength();

                    b.Property<bool>("Removido")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("Saldo")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UsuarioID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Numero");

                    b.HasIndex("UsuarioID");

                    b.ToTable("ContasBancarias");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.Endereco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.Mensagem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AtendimentoID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ContaID")
                        .HasColumnType("char(36)");

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AtendimentoID");

                    b.ToTable("Mensagens");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.SolveBankModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CodigoDoBanco")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SolveBank");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.Transacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CodigoDoBanco")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<Guid>("ContaID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataTransacao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Valor")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ContaID");

                    b.ToTable("Transacoes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Transacao");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.TransacaoCartao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CartaoID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TransacaoID")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CartaoID");

                    b.HasIndex("TransacaoID");

                    b.ToTable("TransacoesCartoes");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CPF_CNPJ")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EnumTipoUsuario")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Removido")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("SolveBankModelId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CPF_CNPJ")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("SolveBankModelId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SolveBank.Entities.Models.WebToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataCriado")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiracaoToken")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UsuarioID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioID");

                    b.ToTable("WebTokens");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.TDeposito", b =>
                {
                    b.HasBaseType("SolveBank.Entities.Models.Transacao");

                    b.Property<string>("Agencia")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CodigoDoEnvelope")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("NumeroDaConta")
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("TDeposito");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.TPagamento", b =>
                {
                    b.HasBaseType("SolveBank.Entities.Models.Transacao");

                    b.Property<string>("Beneficiario")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("TPagamento_Beneficiario");

                    b.Property<string>("NumeroBoleto")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("TPagamento");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.TSaque", b =>
                {
                    b.HasBaseType("SolveBank.Entities.Models.Transacao");

                    b.Property<string>("LocalDoSaque")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("TSaque");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.TTransferencia", b =>
                {
                    b.HasBaseType("SolveBank.Entities.Models.Transacao");

                    b.Property<string>("AgenciaDestino")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Beneficiario")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("ContaOrigem")
                        .HasColumnType("bigint");

                    b.Property<long>("NumeroContaDestino")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("TTransferencia");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SolveBank.Entities.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SolveBank.Entities.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolveBank.Entities.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SolveBank.Entities.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SolveBank.Entities.Models.Atendimento", b =>
                {
                    b.HasOne("SolveBank.Entities.Models.ContaBancaria", "ContaBancaria")
                        .WithMany("Atendimentos")
                        .HasForeignKey("ContaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ContaBancaria");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.Autenticacao2Fatores", b =>
                {
                    b.HasOne("SolveBank.Entities.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.Cartao", b =>
                {
                    b.HasOne("SolveBank.Entities.Models.ContaBancaria", null)
                        .WithMany("Cartoes")
                        .HasForeignKey("ContaBancariaId");

                    b.HasOne("SolveBank.Entities.Models.ContaBancaria", "ContaBancaria")
                        .WithMany()
                        .HasForeignKey("ContaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ContaBancaria");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.ContaBancaria", b =>
                {
                    b.HasOne("SolveBank.Entities.Models.Usuario", "Usuario")
                        .WithMany("ContasBancarias")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.Endereco", b =>
                {
                    b.HasOne("SolveBank.Entities.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.Mensagem", b =>
                {
                    b.HasOne("SolveBank.Entities.Models.Atendimento", "Atendimento")
                        .WithMany("Mensagens")
                        .HasForeignKey("AtendimentoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Atendimento");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.Transacao", b =>
                {
                    b.HasOne("SolveBank.Entities.Models.ContaBancaria", "ContaBancaria")
                        .WithMany("Transacoes")
                        .HasForeignKey("ContaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ContaBancaria");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.TransacaoCartao", b =>
                {
                    b.HasOne("SolveBank.Entities.Models.Cartao", "Cartao")
                        .WithMany("TransacoesCartao")
                        .HasForeignKey("CartaoID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SolveBank.Entities.Models.Transacao", "Transacao")
                        .WithMany()
                        .HasForeignKey("TransacaoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cartao");

                    b.Navigation("Transacao");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.Usuario", b =>
                {
                    b.HasOne("SolveBank.Entities.Models.SolveBankModel", null)
                        .WithMany("Usuarios")
                        .HasForeignKey("SolveBankModelId");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.WebToken", b =>
                {
                    b.HasOne("SolveBank.Entities.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.Atendimento", b =>
                {
                    b.Navigation("Mensagens");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.Cartao", b =>
                {
                    b.Navigation("TransacoesCartao");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.ContaBancaria", b =>
                {
                    b.Navigation("Atendimentos");

                    b.Navigation("Cartoes");

                    b.Navigation("Transacoes");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.SolveBankModel", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("SolveBank.Entities.Models.Usuario", b =>
                {
                    b.Navigation("ContasBancarias");
                });
#pragma warning restore 612, 618
        }
    }
}
